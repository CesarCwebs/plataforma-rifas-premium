{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/ProyectoSistema/plataforma-rifas-premium/web/src/components/home/TicketGrid.tsx"],"sourcesContent":["'use client'; \r\n\r\nimport { useState } from 'react'; \r\n\r\n// Definimos los posibles estados de un boleto para controlar su estilo\r\ntype TicketStatus = 'disponible' | 'ocupado' | 'seleccionado';\r\n\r\n// Props que recibirá nuestro componente de boleto individual\r\ninterface TicketProps {\r\n  number: number;\r\n  status: TicketStatus;\r\n  onClick: (number: number) => void; \r\n}\r\n\r\n// Componente para un solo boleto\r\nfunction Ticket({ number, status, onClick }: TicketProps) {\r\n  // Función para determinar el estilo según el estado del boleto\r\n  const getStatusClasses = () => {\r\n    switch (status) {\r\n      case 'ocupado':\r\n        return 'bg-red-800 text-gray-500 cursor-not-allowed';\r\n      case 'seleccionado':\r\n        return 'bg-yellow-500 text-black font-bold scale-110 shadow-lg shadow-yellow-500/50';\r\n      case 'disponible':\r\n      default:\r\n        return 'bg-gray-700 hover:bg-yellow-600';\r\n    }\r\n  };\r\n\r\n  // Formateamos el número para que siempre tenga 3 dígitos (ej. 007, 025, 123)\r\n  const formattedNumber = number.toString().padStart(3, '0');\r\n\r\n  return (\r\n    <button\r\n      onClick={() => onClick(number)} \r\n      className={`p-2 rounded-md text-center font-mono transition-all duration-200 ${getStatusClasses()}`}\r\n      disabled={status === 'ocupado'}\r\n    >\r\n      {formattedNumber}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Componente principal que muestra la parrilla de boletos\r\nexport default function TicketGrid() {\r\n  // Datos de ejemplo que simulan boletos ocupados al azar\r\n  const initialTickets = Array.from({ length: 100 }, (_, i) => ({\r\n    number: i + 1,\r\n    status: Math.random() < 0.2 ? 'ocupado' : 'disponible', // 20% de boletos ocupados al azar\r\n  }));\r\n\r\n  // Hook useState para guardar los números de los boletos seleccionados por el usuario\r\n  const [selectedTickets, setSelectedTickets] = useState<number[]>([]);\r\n\r\n  // Función para manejar los clics en los boletos\r\n  const handleTicketClick = (number: number) => {\r\n    setSelectedTickets((prevSelected) => {\r\n      // Si el boleto ya está seleccionado, lo quitamos del array (deseleccionar)\r\n      if (prevSelected.includes(number)) {\r\n        return prevSelected.filter((n) => n !== number);\r\n      }\r\n      // Si no está seleccionado, lo añadimos al array (seleccionar)\r\n      else {\r\n        return [...prevSelected, number];\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-12 w-full max-w-4xl mx-auto\">\r\n      <h3 className=\"text-3xl font-bold text-center mb-6\">Elige tus Boletos</h3>\r\n      <div className=\"grid grid-cols-5 sm:grid-cols-10 md:grid-cols-10 lg:grid-cols-10 gap-2\">\r\n        {initialTickets.map((ticket) => {\r\n          // Determinamos el estado final del boleto para renderizarlo\r\n          const status: TicketStatus =\r\n            ticket.status === 'ocupado'\r\n              ? 'ocupado'\r\n              : selectedTickets.includes(ticket.number)\r\n              ? 'seleccionado'\r\n              : 'disponible';\r\n          \r\n          return (\r\n            <Ticket\r\n              key={ticket.number}\r\n              number={ticket.number}\r\n              status={status}\r\n              onClick={handleTicketClick} \r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAcA,iCAAiC;AACjC,SAAS,OAAO,KAAwC;QAAxC,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAe,GAAxC;IACd,+DAA+D;IAC/D,MAAM,mBAAmB;QACvB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;YACL;gBACE,OAAO;QACX;IACF;IAEA,6EAA6E;IAC7E,MAAM,kBAAkB,OAAO,QAAQ,GAAG,QAAQ,CAAC,GAAG;IAEtD,qBACE,6LAAC;QACC,SAAS,IAAM,QAAQ;QACvB,WAAW,AAAC,oEAAsF,OAAnB;QAC/E,UAAU,WAAW;kBAEpB;;;;;;AAGP;KA1BS;AA6BM,SAAS;;IACtB,wDAAwD;IACxD,MAAM,iBAAiB,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAI,GAAG,CAAC,GAAG,IAAM,CAAC;YAC5D,QAAQ,IAAI;YACZ,QAAQ,KAAK,MAAM,KAAK,MAAM,YAAY;QAC5C,CAAC;IAED,qFAAqF;IACrF,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAEnE,gDAAgD;IAChD,MAAM,oBAAoB,CAAC;QACzB,mBAAmB,CAAC;YAClB,2EAA2E;YAC3E,IAAI,aAAa,QAAQ,CAAC,SAAS;gBACjC,OAAO,aAAa,MAAM,CAAC,CAAC,IAAM,MAAM;YAC1C,OAEK;gBACH,OAAO;uBAAI;oBAAc;iBAAO;YAClC;QACF;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BACpD,6LAAC;gBAAI,WAAU;0BACZ,eAAe,GAAG,CAAC,CAAC;oBACnB,4DAA4D;oBAC5D,MAAM,SACJ,OAAO,MAAM,KAAK,YACd,YACA,gBAAgB,QAAQ,CAAC,OAAO,MAAM,IACtC,iBACA;oBAEN,qBACE,6LAAC;wBAEC,QAAQ,OAAO,MAAM;wBACrB,QAAQ;wBACR,SAAS;uBAHJ,OAAO,MAAM;;;;;gBAMxB;;;;;;;;;;;;AAIR;GAjDwB;MAAA","debugId":null}}]
}